// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: shop.proto

package shop

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPhone()) != 11 {
		err := CreateUserRequestValidationError{
			field:  "Phone",
			reason: "value length must be 11 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetNickname()); l < 1 || l > 10 {
		err := CreateUserRequestValidationError{
			field:  "Nickname",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 14 {
		err := CreateUserRequestValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on CreateUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserReplyMultiError, or nil if none found.
func (m *CreateUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserReplyMultiError(errors)
	}

	return nil
}

// CreateUserReplyMultiError is an error wrapping multiple validation errors
// returned by CreateUserReply.ValidateAll() if the designated constraints
// aren't met.
type CreateUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserReplyMultiError) AllErrors() []error { return m }

// CreateUserReplyValidationError is the validation error returned by
// CreateUserReply.Validate if the designated constraints aren't met.
type CreateUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserReplyValidationError) ErrorName() string { return "CreateUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserReplyValidationError{}

// Validate checks the field values on LoginReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReqMultiError, or nil
// if none found.
func (m *LoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	if len(errors) > 0 {
		return LoginReqMultiError(errors)
	}

	return nil
}

// LoginReqMultiError is an error wrapping multiple validation errors returned
// by LoginReq.ValidateAll() if the designated constraints aren't met.
type LoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReqMultiError) AllErrors() []error { return m }

// LoginReqValidationError is the validation error returned by
// LoginReq.Validate if the designated constraints aren't met.
type LoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReqValidationError) ErrorName() string { return "LoginReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReqValidationError{}

// Validate checks the field values on LoginReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReplyMultiError, or
// nil if none found.
func (m *LoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginReplyMultiError(errors)
	}

	return nil
}

// LoginReplyMultiError is an error wrapping multiple validation errors
// returned by LoginReply.ValidateAll() if the designated constraints aren't met.
type LoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReplyMultiError) AllErrors() []error { return m }

// LoginReplyValidationError is the validation error returned by
// LoginReply.Validate if the designated constraints aren't met.
type LoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReplyValidationError) ErrorName() string { return "LoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReplyValidationError{}

// Validate checks the field values on CreateShopRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateShopRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShopRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShopRequestMultiError, or nil if none found.
func (m *CreateShopRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShopRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateShopRequestMultiError(errors)
	}

	return nil
}

// CreateShopRequestMultiError is an error wrapping multiple validation errors
// returned by CreateShopRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateShopRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShopRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShopRequestMultiError) AllErrors() []error { return m }

// CreateShopRequestValidationError is the validation error returned by
// CreateShopRequest.Validate if the designated constraints aren't met.
type CreateShopRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShopRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShopRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShopRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShopRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShopRequestValidationError) ErrorName() string {
	return "CreateShopRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShopRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShopRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShopRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShopRequestValidationError{}

// Validate checks the field values on CreateShopReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateShopReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShopReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShopReplyMultiError, or nil if none found.
func (m *CreateShopReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShopReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateShopReplyMultiError(errors)
	}

	return nil
}

// CreateShopReplyMultiError is an error wrapping multiple validation errors
// returned by CreateShopReply.ValidateAll() if the designated constraints
// aren't met.
type CreateShopReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShopReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShopReplyMultiError) AllErrors() []error { return m }

// CreateShopReplyValidationError is the validation error returned by
// CreateShopReply.Validate if the designated constraints aren't met.
type CreateShopReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShopReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShopReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShopReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShopReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShopReplyValidationError) ErrorName() string { return "CreateShopReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateShopReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShopReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShopReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShopReplyValidationError{}

// Validate checks the field values on UpdateShopRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateShopRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateShopRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateShopRequestMultiError, or nil if none found.
func (m *UpdateShopRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShopRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateShopRequestMultiError(errors)
	}

	return nil
}

// UpdateShopRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateShopRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateShopRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShopRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShopRequestMultiError) AllErrors() []error { return m }

// UpdateShopRequestValidationError is the validation error returned by
// UpdateShopRequest.Validate if the designated constraints aren't met.
type UpdateShopRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShopRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShopRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShopRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShopRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShopRequestValidationError) ErrorName() string {
	return "UpdateShopRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShopRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShopRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShopRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShopRequestValidationError{}

// Validate checks the field values on UpdateShopReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateShopReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateShopReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateShopReplyMultiError, or nil if none found.
func (m *UpdateShopReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShopReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateShopReplyMultiError(errors)
	}

	return nil
}

// UpdateShopReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateShopReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateShopReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShopReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShopReplyMultiError) AllErrors() []error { return m }

// UpdateShopReplyValidationError is the validation error returned by
// UpdateShopReply.Validate if the designated constraints aren't met.
type UpdateShopReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShopReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShopReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShopReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShopReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShopReplyValidationError) ErrorName() string { return "UpdateShopReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateShopReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShopReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShopReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShopReplyValidationError{}

// Validate checks the field values on DeleteShopRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteShopRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShopRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteShopRequestMultiError, or nil if none found.
func (m *DeleteShopRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShopRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteShopRequestMultiError(errors)
	}

	return nil
}

// DeleteShopRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteShopRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteShopRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShopRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShopRequestMultiError) AllErrors() []error { return m }

// DeleteShopRequestValidationError is the validation error returned by
// DeleteShopRequest.Validate if the designated constraints aren't met.
type DeleteShopRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShopRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShopRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShopRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShopRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShopRequestValidationError) ErrorName() string {
	return "DeleteShopRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShopRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShopRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShopRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShopRequestValidationError{}

// Validate checks the field values on DeleteShopReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteShopReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShopReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteShopReplyMultiError, or nil if none found.
func (m *DeleteShopReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShopReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteShopReplyMultiError(errors)
	}

	return nil
}

// DeleteShopReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteShopReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteShopReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShopReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShopReplyMultiError) AllErrors() []error { return m }

// DeleteShopReplyValidationError is the validation error returned by
// DeleteShopReply.Validate if the designated constraints aren't met.
type DeleteShopReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShopReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShopReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShopReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShopReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShopReplyValidationError) ErrorName() string { return "DeleteShopReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteShopReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShopReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShopReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShopReplyValidationError{}

// Validate checks the field values on GetShopRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetShopRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShopRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetShopRequestMultiError,
// or nil if none found.
func (m *GetShopRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShopRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetShopRequestMultiError(errors)
	}

	return nil
}

// GetShopRequestMultiError is an error wrapping multiple validation errors
// returned by GetShopRequest.ValidateAll() if the designated constraints
// aren't met.
type GetShopRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShopRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShopRequestMultiError) AllErrors() []error { return m }

// GetShopRequestValidationError is the validation error returned by
// GetShopRequest.Validate if the designated constraints aren't met.
type GetShopRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShopRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShopRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShopRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShopRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShopRequestValidationError) ErrorName() string { return "GetShopRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetShopRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShopRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShopRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShopRequestValidationError{}

// Validate checks the field values on GetShopReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetShopReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShopReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetShopReplyMultiError, or
// nil if none found.
func (m *GetShopReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShopReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetShopReplyMultiError(errors)
	}

	return nil
}

// GetShopReplyMultiError is an error wrapping multiple validation errors
// returned by GetShopReply.ValidateAll() if the designated constraints aren't met.
type GetShopReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShopReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShopReplyMultiError) AllErrors() []error { return m }

// GetShopReplyValidationError is the validation error returned by
// GetShopReply.Validate if the designated constraints aren't met.
type GetShopReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShopReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShopReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShopReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShopReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShopReplyValidationError) ErrorName() string { return "GetShopReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetShopReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShopReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShopReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShopReplyValidationError{}

// Validate checks the field values on ListShopRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListShopRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShopRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListShopRequestMultiError, or nil if none found.
func (m *ListShopRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShopRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListShopRequestMultiError(errors)
	}

	return nil
}

// ListShopRequestMultiError is an error wrapping multiple validation errors
// returned by ListShopRequest.ValidateAll() if the designated constraints
// aren't met.
type ListShopRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShopRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShopRequestMultiError) AllErrors() []error { return m }

// ListShopRequestValidationError is the validation error returned by
// ListShopRequest.Validate if the designated constraints aren't met.
type ListShopRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShopRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShopRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShopRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShopRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShopRequestValidationError) ErrorName() string { return "ListShopRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListShopRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShopRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShopRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShopRequestValidationError{}

// Validate checks the field values on ListShopReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListShopReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShopReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListShopReplyMultiError, or
// nil if none found.
func (m *ListShopReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShopReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListShopReplyMultiError(errors)
	}

	return nil
}

// ListShopReplyMultiError is an error wrapping multiple validation errors
// returned by ListShopReply.ValidateAll() if the designated constraints
// aren't met.
type ListShopReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShopReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShopReplyMultiError) AllErrors() []error { return m }

// ListShopReplyValidationError is the validation error returned by
// ListShopReply.Validate if the designated constraints aren't met.
type ListShopReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShopReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShopReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShopReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShopReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShopReplyValidationError) ErrorName() string { return "ListShopReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListShopReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShopReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShopReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShopReplyValidationError{}

// Validate checks the field values on CreateUserReply_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserReply_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserReply_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserReply_DataMultiError, or nil if none found.
func (m *CreateUserReply_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserReply_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateUserReply_DataMultiError(errors)
	}

	return nil
}

// CreateUserReply_DataMultiError is an error wrapping multiple validation
// errors returned by CreateUserReply_Data.ValidateAll() if the designated
// constraints aren't met.
type CreateUserReply_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserReply_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserReply_DataMultiError) AllErrors() []error { return m }

// CreateUserReply_DataValidationError is the validation error returned by
// CreateUserReply_Data.Validate if the designated constraints aren't met.
type CreateUserReply_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserReply_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserReply_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserReply_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserReply_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserReply_DataValidationError) ErrorName() string {
	return "CreateUserReply_DataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserReply_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserReply_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserReply_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserReply_DataValidationError{}

// Validate checks the field values on LoginReply_Data with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginReply_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReply_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginReply_DataMultiError, or nil if none found.
func (m *LoginReply_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReply_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginReply_DataMultiError(errors)
	}

	return nil
}

// LoginReply_DataMultiError is an error wrapping multiple validation errors
// returned by LoginReply_Data.ValidateAll() if the designated constraints
// aren't met.
type LoginReply_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReply_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReply_DataMultiError) AllErrors() []error { return m }

// LoginReply_DataValidationError is the validation error returned by
// LoginReply_Data.Validate if the designated constraints aren't met.
type LoginReply_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReply_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReply_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReply_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReply_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReply_DataValidationError) ErrorName() string { return "LoginReply_DataValidationError" }

// Error satisfies the builtin error interface
func (e LoginReply_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReply_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReply_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReply_DataValidationError{}
